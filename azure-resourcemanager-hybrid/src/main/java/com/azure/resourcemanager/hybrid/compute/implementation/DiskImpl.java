// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybrid.compute.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.hybrid.compute.fluent.models.DiskInner;
import com.azure.resourcemanager.hybrid.compute.models.CreationData;
import com.azure.resourcemanager.hybrid.compute.models.Disk;
import com.azure.resourcemanager.hybrid.compute.models.DiskSku;
import com.azure.resourcemanager.hybrid.compute.models.DiskState;
import com.azure.resourcemanager.hybrid.compute.models.DiskUpdate;
import com.azure.resourcemanager.hybrid.compute.models.Encryption;
import com.azure.resourcemanager.hybrid.compute.models.EncryptionSettingsCollection;
import com.azure.resourcemanager.hybrid.compute.models.HyperVGeneration;
import com.azure.resourcemanager.hybrid.compute.models.OperatingSystemTypes;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class DiskImpl implements Disk, Disk.Definition, Disk.Update {
    private DiskInner innerObject;

    private final com.azure.resourcemanager.hybrid.compute.ComputeManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String managedBy() {
        return this.innerModel().managedBy();
    }

    public DiskSku sku() {
        return this.innerModel().sku();
    }

    public List<String> zones() {
        List<String> inner = this.innerModel().zones();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public OffsetDateTime timeCreated() {
        return this.innerModel().timeCreated();
    }

    public OperatingSystemTypes osType() {
        return this.innerModel().osType();
    }

    public HyperVGeneration hyperVGeneration() {
        return this.innerModel().hyperVGeneration();
    }

    public CreationData creationData() {
        return this.innerModel().creationData();
    }

    public Integer diskSizeGB() {
        return this.innerModel().diskSizeGB();
    }

    public Long diskSizeBytes() {
        return this.innerModel().diskSizeBytes();
    }

    public String uniqueId() {
        return this.innerModel().uniqueId();
    }

    public EncryptionSettingsCollection encryptionSettingsCollection() {
        return this.innerModel().encryptionSettingsCollection();
    }

    public String provisioningState() {
        return this.innerModel().provisioningState();
    }

    public Long diskIopsReadWrite() {
        return this.innerModel().diskIopsReadWrite();
    }

    public Integer diskMBpsReadWrite() {
        return this.innerModel().diskMBpsReadWrite();
    }

    public DiskState diskState() {
        return this.innerModel().diskState();
    }

    public Encryption encryption() {
        return this.innerModel().encryption();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public DiskInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.hybrid.compute.ComputeManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String diskName;

    private DiskUpdate updateDisk;

    public DiskImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public Disk create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDisks()
                .createOrUpdate(resourceGroupName, diskName, this.innerModel(), Context.NONE);
        return this;
    }

    public Disk create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDisks()
                .createOrUpdate(resourceGroupName, diskName, this.innerModel(), context);
        return this;
    }

    DiskImpl(String name, com.azure.resourcemanager.hybrid.compute.ComputeManager serviceManager) {
        this.innerObject = new DiskInner();
        this.serviceManager = serviceManager;
        this.diskName = name;
    }

    public DiskImpl update() {
        this.updateDisk = new DiskUpdate();
        return this;
    }

    public Disk apply() {
        this.innerObject =
            serviceManager.serviceClient().getDisks().update(resourceGroupName, diskName, updateDisk, Context.NONE);
        return this;
    }

    public Disk apply(Context context) {
        this.innerObject =
            serviceManager.serviceClient().getDisks().update(resourceGroupName, diskName, updateDisk, context);
        return this;
    }

    DiskImpl(DiskInner innerObject, com.azure.resourcemanager.hybrid.compute.ComputeManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.diskName = Utils.getValueFromIdByName(innerObject.id(), "disks");
    }

    public Disk refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDisks()
                .getByResourceGroupWithResponse(resourceGroupName, diskName, Context.NONE)
                .getValue();
        return this;
    }

    public Disk refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDisks()
                .getByResourceGroupWithResponse(resourceGroupName, diskName, context)
                .getValue();
        return this;
    }

    public DiskImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public DiskImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public DiskImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateDisk.withTags(tags);
            return this;
        }
    }

    public DiskImpl withSku(DiskSku sku) {
        if (isInCreateMode()) {
            this.innerModel().withSku(sku);
            return this;
        } else {
            this.updateDisk.withSku(sku);
            return this;
        }
    }

    public DiskImpl withZones(List<String> zones) {
        this.innerModel().withZones(zones);
        return this;
    }

    public DiskImpl withOsType(OperatingSystemTypes osType) {
        if (isInCreateMode()) {
            this.innerModel().withOsType(osType);
            return this;
        } else {
            this.updateDisk.withOsType(osType);
            return this;
        }
    }

    public DiskImpl withHyperVGeneration(HyperVGeneration hyperVGeneration) {
        this.innerModel().withHyperVGeneration(hyperVGeneration);
        return this;
    }

    public DiskImpl withCreationData(CreationData creationData) {
        this.innerModel().withCreationData(creationData);
        return this;
    }

    public DiskImpl withDiskSizeGB(Integer diskSizeGB) {
        if (isInCreateMode()) {
            this.innerModel().withDiskSizeGB(diskSizeGB);
            return this;
        } else {
            this.updateDisk.withDiskSizeGB(diskSizeGB);
            return this;
        }
    }

    public DiskImpl withEncryptionSettingsCollection(EncryptionSettingsCollection encryptionSettingsCollection) {
        if (isInCreateMode()) {
            this.innerModel().withEncryptionSettingsCollection(encryptionSettingsCollection);
            return this;
        } else {
            this.updateDisk.withEncryptionSettingsCollection(encryptionSettingsCollection);
            return this;
        }
    }

    public DiskImpl withDiskIopsReadWrite(Long diskIopsReadWrite) {
        if (isInCreateMode()) {
            this.innerModel().withDiskIopsReadWrite(diskIopsReadWrite);
            return this;
        } else {
            this.updateDisk.withDiskIopsReadWrite(diskIopsReadWrite);
            return this;
        }
    }

    public DiskImpl withDiskMBpsReadWrite(Integer diskMBpsReadWrite) {
        if (isInCreateMode()) {
            this.innerModel().withDiskMBpsReadWrite(diskMBpsReadWrite);
            return this;
        } else {
            this.updateDisk.withDiskMBpsReadWrite(diskMBpsReadWrite);
            return this;
        }
    }

    public DiskImpl withEncryption(Encryption encryption) {
        if (isInCreateMode()) {
            this.innerModel().withEncryption(encryption);
            return this;
        } else {
            this.updateDisk.withEncryption(encryption);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
