// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybrid.authorization.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybrid.authorization.fluent.PermissionsClient;
import com.azure.resourcemanager.hybrid.authorization.fluent.models.PermissionInner;
import com.azure.resourcemanager.hybrid.authorization.models.Permission;
import com.azure.resourcemanager.hybrid.authorization.models.Permissions;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class PermissionsImpl implements Permissions {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(PermissionsImpl.class);

    private final PermissionsClient innerClient;

    private final com.azure.resourcemanager.hybrid.authorization.AuthorizationManager serviceManager;

    public PermissionsImpl(
        PermissionsClient innerClient,
        com.azure.resourcemanager.hybrid.authorization.AuthorizationManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Permission> listByResourceGroup(String resourceGroupName) {
        PagedIterable<PermissionInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new PermissionImpl(inner1, this.manager()));
    }

    public PagedIterable<Permission> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<PermissionInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new PermissionImpl(inner1, this.manager()));
    }

    public PagedIterable<Permission> listForResource(
        String resourceGroupName,
        String resourceProviderNamespace,
        String parentResourcePath,
        String resourceType,
        String resourceName) {
        PagedIterable<PermissionInner> inner =
            this
                .serviceClient()
                .listForResource(
                    resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName);
        return Utils.mapPage(inner, inner1 -> new PermissionImpl(inner1, this.manager()));
    }

    public PagedIterable<Permission> listForResource(
        String resourceGroupName,
        String resourceProviderNamespace,
        String parentResourcePath,
        String resourceType,
        String resourceName,
        Context context) {
        PagedIterable<PermissionInner> inner =
            this
                .serviceClient()
                .listForResource(
                    resourceGroupName,
                    resourceProviderNamespace,
                    parentResourcePath,
                    resourceType,
                    resourceName,
                    context);
        return Utils.mapPage(inner, inner1 -> new PermissionImpl(inner1, this.manager()));
    }

    private PermissionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.hybrid.authorization.AuthorizationManager manager() {
        return this.serviceManager;
    }
}
