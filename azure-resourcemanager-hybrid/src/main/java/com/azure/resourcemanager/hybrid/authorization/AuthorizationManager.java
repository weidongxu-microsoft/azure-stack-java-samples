// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybrid.authorization;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Configuration;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybrid.authorization.fluent.AuthorizationManagementClient;
import com.azure.resourcemanager.hybrid.authorization.implementation.AuthorizationManagementClientBuilder;
import com.azure.resourcemanager.hybrid.authorization.implementation.AuthorizationOperationsImpl;
import com.azure.resourcemanager.hybrid.authorization.implementation.ClassicAdministratorsImpl;
import com.azure.resourcemanager.hybrid.authorization.implementation.ManagementLocksImpl;
import com.azure.resourcemanager.hybrid.authorization.implementation.PermissionsImpl;
import com.azure.resourcemanager.hybrid.authorization.implementation.PolicyAssignmentsImpl;
import com.azure.resourcemanager.hybrid.authorization.implementation.PolicyDefinitionsImpl;
import com.azure.resourcemanager.hybrid.authorization.implementation.ProviderOperationsMetadatasImpl;
import com.azure.resourcemanager.hybrid.authorization.implementation.RoleAssignmentsImpl;
import com.azure.resourcemanager.hybrid.authorization.implementation.RoleDefinitionsImpl;
import com.azure.resourcemanager.hybrid.authorization.models.AuthorizationOperations;
import com.azure.resourcemanager.hybrid.authorization.models.ClassicAdministrators;
import com.azure.resourcemanager.hybrid.authorization.models.ManagementLocks;
import com.azure.resourcemanager.hybrid.authorization.models.Permissions;
import com.azure.resourcemanager.hybrid.authorization.models.PolicyAssignments;
import com.azure.resourcemanager.hybrid.authorization.models.PolicyDefinitions;
import com.azure.resourcemanager.hybrid.authorization.models.ProviderOperationsMetadatas;
import com.azure.resourcemanager.hybrid.authorization.models.RoleAssignments;
import com.azure.resourcemanager.hybrid.authorization.models.RoleDefinitions;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Entry point to AuthorizationManager. Role based access control provides you a way to apply granular level policy
 * administration down to individual resources or resource groups. These operations enable you to manage role
 * definitions and role assignments. A role definition describes the set of actions that can be performed on resources.
 * A role assignment grants access to Azure Active Directory users.
 */
public final class AuthorizationManager {
    private ClassicAdministrators classicAdministrators;

    private PolicyAssignments policyAssignments;

    private RoleAssignments roleAssignments;

    private AuthorizationOperations authorizationOperations;

    private ManagementLocks managementLocks;

    private ProviderOperationsMetadatas providerOperationsMetadatas;

    private Permissions permissions;

    private RoleDefinitions roleDefinitions;

    private PolicyDefinitions policyDefinitions;

    private final AuthorizationManagementClient clientObject;

    private AuthorizationManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject =
            new AuthorizationManagementClientBuilder()
                .pipeline(httpPipeline)
                .endpoint(profile.getEnvironment().getResourceManagerEndpoint())
                .subscriptionId(profile.getSubscriptionId())
                .defaultPollInterval(defaultPollInterval)
                .buildClient();
    }

    /**
     * Creates an instance of Authorization service API entry point.
     *
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the Authorization service API instance.
     */
    public static AuthorizationManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Gets a Configurable instance that can be used to create AuthorizationManager with optional configuration.
     *
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new AuthorizationManager.Configurable();
    }

    /** The Configurable allowing configurations to be set. */
    public static final class Configurable {
        private final ClientLogger logger = new ClientLogger(Configurable.class);

        private HttpClient httpClient;
        private HttpLogOptions httpLogOptions;
        private final List<HttpPipelinePolicy> policies = new ArrayList<>();
        private RetryPolicy retryPolicy;
        private Duration defaultPollInterval;

        private Configurable() {
        }

        /**
         * Sets the http client.
         *
         * @param httpClient the HTTP client.
         * @return the configurable object itself.
         */
        public Configurable withHttpClient(HttpClient httpClient) {
            this.httpClient = Objects.requireNonNull(httpClient, "'httpClient' cannot be null.");
            return this;
        }

        /**
         * Sets the logging options to the HTTP pipeline.
         *
         * @param httpLogOptions the HTTP log options.
         * @return the configurable object itself.
         */
        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {
            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, "'httpLogOptions' cannot be null.");
            return this;
        }

        /**
         * Adds the pipeline policy to the HTTP pipeline.
         *
         * @param policy the HTTP pipeline policy.
         * @return the configurable object itself.
         */
        public Configurable withPolicy(HttpPipelinePolicy policy) {
            this.policies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
            return this;
        }

        /**
         * Sets the retry policy to the HTTP pipeline.
         *
         * @param retryPolicy the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy, "'retryPolicy' cannot be null.");
            return this;
        }

        /**
         * Sets the default poll interval, used when service does not provide "Retry-After" header.
         *
         * @param defaultPollInterval the default poll interval.
         * @return the configurable object itself.
         */
        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {
            this.defaultPollInterval = Objects.requireNonNull(defaultPollInterval, "'retryPolicy' cannot be null.");
            if (this.defaultPollInterval.isNegative()) {
                throw logger.logExceptionAsError(new IllegalArgumentException("'httpPipeline' cannot be negative"));
            }
            return this;
        }

        /**
         * Creates an instance of Authorization service API entry point.
         *
         * @param credential the credential to use.
         * @param profile the Azure profile for client.
         * @return the Authorization service API instance.
         */
        public AuthorizationManager authenticate(TokenCredential credential, AzureProfile profile) {
            Objects.requireNonNull(credential, "'credential' cannot be null.");
            Objects.requireNonNull(profile, "'profile' cannot be null.");

            StringBuilder userAgentBuilder = new StringBuilder();
            userAgentBuilder
                .append("azsdk-java")
                .append("-")
                .append("com.azure.resourcemanager.hybrid.authorization")
                .append("/")
                .append("1.0.0-beta.1");
            if (!Configuration.getGlobalConfiguration().get("AZURE_TELEMETRY_DISABLED", false)) {
                userAgentBuilder
                    .append(" (")
                    .append(Configuration.getGlobalConfiguration().get("java.version"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.name"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.version"))
                    .append("; auto-generated)");
            } else {
                userAgentBuilder.append(" (auto-generated)");
            }

            if (retryPolicy == null) {
                retryPolicy = new RetryPolicy("Retry-After", ChronoUnit.SECONDS);
            }
            List<HttpPipelinePolicy> policies = new ArrayList<>();
            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));
            policies.add(new RequestIdPolicy());
            HttpPolicyProviders.addBeforeRetryPolicies(policies);
            policies.add(retryPolicy);
            policies.add(new AddDatePolicy());
            policies
                .add(
                    new BearerTokenAuthenticationPolicy(
                        credential, profile.getEnvironment().getManagementEndpoint() + "/.default"));
            policies.addAll(this.policies);
            HttpPolicyProviders.addAfterRetryPolicies(policies);
            policies.add(new HttpLoggingPolicy(httpLogOptions));
            HttpPipeline httpPipeline =
                new HttpPipelineBuilder()
                    .httpClient(httpClient)
                    .policies(policies.toArray(new HttpPipelinePolicy[0]))
                    .build();
            return new AuthorizationManager(httpPipeline, profile, defaultPollInterval);
        }
    }

    /** @return Resource collection API of ClassicAdministrators. */
    public ClassicAdministrators classicAdministrators() {
        if (this.classicAdministrators == null) {
            this.classicAdministrators = new ClassicAdministratorsImpl(clientObject.getClassicAdministrators(), this);
        }
        return classicAdministrators;
    }

    /** @return Resource collection API of PolicyAssignments. */
    public PolicyAssignments policyAssignments() {
        if (this.policyAssignments == null) {
            this.policyAssignments = new PolicyAssignmentsImpl(clientObject.getPolicyAssignments(), this);
        }
        return policyAssignments;
    }

    /** @return Resource collection API of RoleAssignments. */
    public RoleAssignments roleAssignments() {
        if (this.roleAssignments == null) {
            this.roleAssignments = new RoleAssignmentsImpl(clientObject.getRoleAssignments(), this);
        }
        return roleAssignments;
    }

    /** @return Resource collection API of AuthorizationOperations. */
    public AuthorizationOperations authorizationOperations() {
        if (this.authorizationOperations == null) {
            this.authorizationOperations =
                new AuthorizationOperationsImpl(clientObject.getAuthorizationOperations(), this);
        }
        return authorizationOperations;
    }

    /** @return Resource collection API of ManagementLocks. */
    public ManagementLocks managementLocks() {
        if (this.managementLocks == null) {
            this.managementLocks = new ManagementLocksImpl(clientObject.getManagementLocks(), this);
        }
        return managementLocks;
    }

    /** @return Resource collection API of ProviderOperationsMetadatas. */
    public ProviderOperationsMetadatas providerOperationsMetadatas() {
        if (this.providerOperationsMetadatas == null) {
            this.providerOperationsMetadatas =
                new ProviderOperationsMetadatasImpl(clientObject.getProviderOperationsMetadatas(), this);
        }
        return providerOperationsMetadatas;
    }

    /** @return Resource collection API of Permissions. */
    public Permissions permissions() {
        if (this.permissions == null) {
            this.permissions = new PermissionsImpl(clientObject.getPermissions(), this);
        }
        return permissions;
    }

    /** @return Resource collection API of RoleDefinitions. */
    public RoleDefinitions roleDefinitions() {
        if (this.roleDefinitions == null) {
            this.roleDefinitions = new RoleDefinitionsImpl(clientObject.getRoleDefinitions(), this);
        }
        return roleDefinitions;
    }

    /** @return Resource collection API of PolicyDefinitions. */
    public PolicyDefinitions policyDefinitions() {
        if (this.policyDefinitions == null) {
            this.policyDefinitions = new PolicyDefinitionsImpl(clientObject.getPolicyDefinitions(), this);
        }
        return policyDefinitions;
    }

    /**
     * @return Wrapped service client AuthorizationManagementClient providing direct access to the underlying
     *     auto-generated API implementation, based on Azure REST API.
     */
    public AuthorizationManagementClient serviceClient() {
        return this.clientObject;
    }
}
