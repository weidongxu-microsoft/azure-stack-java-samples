// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybrid.network.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybrid.network.fluent.RoutesClient;
import com.azure.resourcemanager.hybrid.network.fluent.models.RouteInner;
import com.azure.resourcemanager.hybrid.network.models.Route;
import com.azure.resourcemanager.hybrid.network.models.Routes;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class RoutesImpl implements Routes {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(RoutesImpl.class);

    private final RoutesClient innerClient;

    private final com.azure.resourcemanager.hybrid.network.NetworkManager serviceManager;

    public RoutesImpl(
        RoutesClient innerClient, com.azure.resourcemanager.hybrid.network.NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void delete(String resourceGroupName, String routeTableName, String routeName) {
        this.serviceClient().delete(resourceGroupName, routeTableName, routeName);
    }

    public void delete(String resourceGroupName, String routeTableName, String routeName, Context context) {
        this.serviceClient().delete(resourceGroupName, routeTableName, routeName, context);
    }

    public Route get(String resourceGroupName, String routeTableName, String routeName) {
        RouteInner inner = this.serviceClient().get(resourceGroupName, routeTableName, routeName);
        if (inner != null) {
            return new RouteImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Route> getWithResponse(
        String resourceGroupName, String routeTableName, String routeName, Context context) {
        Response<RouteInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, routeTableName, routeName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RouteImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Route createOrUpdate(
        String resourceGroupName, String routeTableName, String routeName, RouteInner routeParameters) {
        RouteInner inner =
            this.serviceClient().createOrUpdate(resourceGroupName, routeTableName, routeName, routeParameters);
        if (inner != null) {
            return new RouteImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Route createOrUpdate(
        String resourceGroupName,
        String routeTableName,
        String routeName,
        RouteInner routeParameters,
        Context context) {
        RouteInner inner =
            this.serviceClient().createOrUpdate(resourceGroupName, routeTableName, routeName, routeParameters, context);
        if (inner != null) {
            return new RouteImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<Route> list(String resourceGroupName, String routeTableName) {
        PagedIterable<RouteInner> inner = this.serviceClient().list(resourceGroupName, routeTableName);
        return Utils.mapPage(inner, inner1 -> new RouteImpl(inner1, this.manager()));
    }

    public PagedIterable<Route> list(String resourceGroupName, String routeTableName, Context context) {
        PagedIterable<RouteInner> inner = this.serviceClient().list(resourceGroupName, routeTableName, context);
        return Utils.mapPage(inner, inner1 -> new RouteImpl(inner1, this.manager()));
    }

    private RoutesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.hybrid.network.NetworkManager manager() {
        return this.serviceManager;
    }
}
