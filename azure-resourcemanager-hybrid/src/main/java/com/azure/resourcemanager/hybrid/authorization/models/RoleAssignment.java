// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybrid.authorization.models;

import com.azure.core.util.Context;
import com.azure.resourcemanager.hybrid.authorization.fluent.models.RoleAssignmentInner;

/** An immutable client-side representation of RoleAssignment. */
public interface RoleAssignment {
    /**
     * Gets the id property: The role assignment ID.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The role assignment name.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The role assignment type.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the properties property: Role assignment properties.
     *
     * @return the properties value.
     */
    RoleAssignmentPropertiesWithScope properties();

    /**
     * Gets the inner com.azure.resourcemanager.hybrid.authorization.fluent.models.RoleAssignmentInner object.
     *
     * @return the inner object.
     */
    RoleAssignmentInner innerModel();

    /** The entirety of the RoleAssignment definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithScope,
            DefinitionStages.WithProperties,
            DefinitionStages.WithCreate {
    }
    /** The RoleAssignment definition stages. */
    interface DefinitionStages {
        /** The first stage of the RoleAssignment definition. */
        interface Blank extends WithScope {
        }
        /** The stage of the RoleAssignment definition allowing to specify parent resource. */
        interface WithScope {
            /**
             * Specifies scope.
             *
             * @param scope The scope of the role assignment to create. The scope can be any REST resource instance. For
             *     example, use '/subscriptions/{subscription-id}/' for a subscription,
             *     '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for a resource group, and
             *     '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}'
             *     for a resource.
             * @return the next definition stage.
             */
            WithProperties withExistingScope(String scope);
        }
        /** The stage of the RoleAssignment definition allowing to specify properties. */
        interface WithProperties {
            /**
             * Specifies the properties property: Role assignment properties..
             *
             * @param properties Role assignment properties.
             * @return the next definition stage.
             */
            WithCreate withProperties(RoleAssignmentProperties properties);
        }
        /**
         * The stage of the RoleAssignment definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            RoleAssignment create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            RoleAssignment create(Context context);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    RoleAssignment refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    RoleAssignment refresh(Context context);
}
