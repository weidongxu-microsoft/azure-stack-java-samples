// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybrid.network.implementation;

import com.azure.core.management.SubResource;
import com.azure.resourcemanager.hybrid.network.fluent.models.InboundNatRuleInner;
import com.azure.resourcemanager.hybrid.network.fluent.models.NetworkInterfaceIpConfigurationInner;
import com.azure.resourcemanager.hybrid.network.models.InboundNatRule;
import com.azure.resourcemanager.hybrid.network.models.NetworkInterfaceIpConfiguration;
import com.azure.resourcemanager.hybrid.network.models.TransportProtocol;

public final class InboundNatRuleImpl implements InboundNatRule {
    private InboundNatRuleInner innerObject;

    private final com.azure.resourcemanager.hybrid.network.NetworkManager serviceManager;

    InboundNatRuleImpl(
        InboundNatRuleInner innerObject, com.azure.resourcemanager.hybrid.network.NetworkManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
    }

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public SubResource frontendIpConfiguration() {
        return this.innerModel().frontendIpConfiguration();
    }

    public NetworkInterfaceIpConfiguration backendIpConfiguration() {
        NetworkInterfaceIpConfigurationInner inner = this.innerModel().backendIpConfiguration();
        if (inner != null) {
            return new NetworkInterfaceIpConfigurationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public TransportProtocol protocol() {
        return this.innerModel().protocol();
    }

    public Integer frontendPort() {
        return this.innerModel().frontendPort();
    }

    public Integer backendPort() {
        return this.innerModel().backendPort();
    }

    public Integer idleTimeoutInMinutes() {
        return this.innerModel().idleTimeoutInMinutes();
    }

    public Boolean enableFloatingIp() {
        return this.innerModel().enableFloatingIp();
    }

    public Boolean enableTcpReset() {
        return this.innerModel().enableTcpReset();
    }

    public String provisioningState() {
        return this.innerModel().provisioningState();
    }

    public InboundNatRuleInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.hybrid.network.NetworkManager manager() {
        return this.serviceManager;
    }
}
