// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybrid.authorization.models;

import com.azure.core.util.Context;
import com.azure.resourcemanager.hybrid.authorization.fluent.models.PolicyAssignmentInner;

/** An immutable client-side representation of PolicyAssignment. */
public interface PolicyAssignment {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the type property: The type of the policy assignment.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the name property: The name of the policy assignment.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the displayName property: The display name of the policy assignment.
     *
     * @return the displayName value.
     */
    String displayName();

    /**
     * Gets the policyDefinitionId property: The ID of the policy definition.
     *
     * @return the policyDefinitionId value.
     */
    String policyDefinitionId();

    /**
     * Gets the scope property: The scope for the policy assignment.
     *
     * @return the scope value.
     */
    String scope();

    /**
     * Gets the parameters property: Required if a parameter is used in policy rule.
     *
     * @return the parameters value.
     */
    Object parameters();

    /**
     * Gets the description property: This message will be part of response in case of policy violation.
     *
     * @return the description value.
     */
    String description();

    /**
     * Gets the inner com.azure.resourcemanager.hybrid.authorization.fluent.models.PolicyAssignmentInner object.
     *
     * @return the inner object.
     */
    PolicyAssignmentInner innerModel();

    /** The entirety of the PolicyAssignment definition. */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithScopeStage, DefinitionStages.WithCreate {
    }
    /** The PolicyAssignment definition stages. */
    interface DefinitionStages {
        /** The first stage of the PolicyAssignment definition. */
        interface Blank extends WithScopeStage {
        }
        /** The stage of the PolicyAssignment definition allowing to specify parent resource. */
        interface WithScopeStage {
            /**
             * Specifies scope.
             *
             * @param scope The scope of the policy assignment.
             * @return the next definition stage.
             */
            WithCreate withExistingScope(String scope);
        }
        /**
         * The stage of the PolicyAssignment definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithType,
                DefinitionStages.WithName,
                DefinitionStages.WithDisplayName,
                DefinitionStages.WithPolicyDefinitionId,
                DefinitionStages.WithScope,
                DefinitionStages.WithParameters,
                DefinitionStages.WithDescription {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            PolicyAssignment create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            PolicyAssignment create(Context context);
        }
        /** The stage of the PolicyAssignment definition allowing to specify type. */
        interface WithType {
            /**
             * Specifies the type property: The type of the policy assignment..
             *
             * @param type The type of the policy assignment.
             * @return the next definition stage.
             */
            WithCreate withType(String type);
        }
        /** The stage of the PolicyAssignment definition allowing to specify name. */
        interface WithName {
            /**
             * Specifies the name property: The name of the policy assignment..
             *
             * @param name The name of the policy assignment.
             * @return the next definition stage.
             */
            WithCreate withName(String name);
        }
        /** The stage of the PolicyAssignment definition allowing to specify displayName. */
        interface WithDisplayName {
            /**
             * Specifies the displayName property: The display name of the policy assignment..
             *
             * @param displayName The display name of the policy assignment.
             * @return the next definition stage.
             */
            WithCreate withDisplayName(String displayName);
        }
        /** The stage of the PolicyAssignment definition allowing to specify policyDefinitionId. */
        interface WithPolicyDefinitionId {
            /**
             * Specifies the policyDefinitionId property: The ID of the policy definition..
             *
             * @param policyDefinitionId The ID of the policy definition.
             * @return the next definition stage.
             */
            WithCreate withPolicyDefinitionId(String policyDefinitionId);
        }
        /** The stage of the PolicyAssignment definition allowing to specify scope. */
        interface WithScope {
            /**
             * Specifies the scope property: The scope for the policy assignment..
             *
             * @param scope The scope for the policy assignment.
             * @return the next definition stage.
             */
            WithCreate withScope(String scope);
        }
        /** The stage of the PolicyAssignment definition allowing to specify parameters. */
        interface WithParameters {
            /**
             * Specifies the parameters property: Required if a parameter is used in policy rule..
             *
             * @param parameters Required if a parameter is used in policy rule.
             * @return the next definition stage.
             */
            WithCreate withParameters(Object parameters);
        }
        /** The stage of the PolicyAssignment definition allowing to specify description. */
        interface WithDescription {
            /**
             * Specifies the description property: This message will be part of response in case of policy violation..
             *
             * @param description This message will be part of response in case of policy violation.
             * @return the next definition stage.
             */
            WithCreate withDescription(String description);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    PolicyAssignment refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    PolicyAssignment refresh(Context context);
}
