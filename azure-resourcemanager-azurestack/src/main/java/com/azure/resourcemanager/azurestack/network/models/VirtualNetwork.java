// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestack.network.models;

import com.azure.core.management.Region;
import com.azure.core.management.SubResource;
import com.azure.core.util.Context;
import com.azure.resourcemanager.azurestack.network.fluent.models.SubnetInner;
import com.azure.resourcemanager.azurestack.network.fluent.models.VirtualNetworkInner;
import com.azure.resourcemanager.azurestack.network.fluent.models.VirtualNetworkPeeringInner;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of VirtualNetwork. */
public interface VirtualNetwork {
    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the etag property: Gets a unique read-only string that changes whenever the resource is updated.
     *
     * @return the etag value.
     */
    String etag();

    /**
     * Gets the addressSpace property: The AddressSpace that contains an array of IP address ranges that can be used by
     * subnets.
     *
     * @return the addressSpace value.
     */
    AddressSpace addressSpace();

    /**
     * Gets the dhcpOptions property: The dhcpOptions that contains an array of DNS servers available to VMs deployed in
     * the virtual network.
     *
     * @return the dhcpOptions value.
     */
    DhcpOptions dhcpOptions();

    /**
     * Gets the subnets property: A list of subnets in a Virtual Network.
     *
     * @return the subnets value.
     */
    List<Subnet> subnets();

    /**
     * Gets the virtualNetworkPeerings property: A list of peerings in a Virtual Network.
     *
     * @return the virtualNetworkPeerings value.
     */
    List<VirtualNetworkPeering> virtualNetworkPeerings();

    /**
     * Gets the resourceGuid property: The resourceGuid property of the Virtual Network resource.
     *
     * @return the resourceGuid value.
     */
    String resourceGuid();

    /**
     * Gets the provisioningState property: The provisioning state of the PublicIP resource. Possible values are:
     * 'Updating', 'Deleting', and 'Failed'.
     *
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * Gets the enableDdosProtection property: Indicates if DDoS protection is enabled for all the protected resources
     * in the virtual network. It requires a DDoS protection plan associated with the resource.
     *
     * @return the enableDdosProtection value.
     */
    Boolean enableDdosProtection();

    /**
     * Gets the enableVmProtection property: Indicates if VM protection is enabled for all the subnets in the virtual
     * network.
     *
     * @return the enableVmProtection value.
     */
    Boolean enableVmProtection();

    /**
     * Gets the ddosProtectionPlan property: The DDoS protection plan associated with the virtual network.
     *
     * @return the ddosProtectionPlan value.
     */
    SubResource ddosProtectionPlan();

    /**
     * Gets the id property: Resource ID.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.azurestack.network.fluent.models.VirtualNetworkInner object.
     *
     * @return the inner object.
     */
    VirtualNetworkInner innerModel();

    /** The entirety of the VirtualNetwork definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithCreate {
    }
    /** The VirtualNetwork definition stages. */
    interface DefinitionStages {
        /** The first stage of the VirtualNetwork definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the VirtualNetwork definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the VirtualNetwork definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName The name of the resource group.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }
        /**
         * The stage of the VirtualNetwork definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithEtag,
                DefinitionStages.WithAddressSpace,
                DefinitionStages.WithDhcpOptions,
                DefinitionStages.WithSubnets,
                DefinitionStages.WithVirtualNetworkPeerings,
                DefinitionStages.WithResourceGuid,
                DefinitionStages.WithProvisioningState,
                DefinitionStages.WithEnableDdosProtection,
                DefinitionStages.WithEnableVmProtection,
                DefinitionStages.WithDdosProtectionPlan {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            VirtualNetwork create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            VirtualNetwork create(Context context);
        }
        /** The stage of the VirtualNetwork definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the VirtualNetwork definition allowing to specify etag. */
        interface WithEtag {
            /**
             * Specifies the etag property: Gets a unique read-only string that changes whenever the resource is
             * updated..
             *
             * @param etag Gets a unique read-only string that changes whenever the resource is updated.
             * @return the next definition stage.
             */
            WithCreate withEtag(String etag);
        }
        /** The stage of the VirtualNetwork definition allowing to specify addressSpace. */
        interface WithAddressSpace {
            /**
             * Specifies the addressSpace property: The AddressSpace that contains an array of IP address ranges that
             * can be used by subnets..
             *
             * @param addressSpace The AddressSpace that contains an array of IP address ranges that can be used by
             *     subnets.
             * @return the next definition stage.
             */
            WithCreate withAddressSpace(AddressSpace addressSpace);
        }
        /** The stage of the VirtualNetwork definition allowing to specify dhcpOptions. */
        interface WithDhcpOptions {
            /**
             * Specifies the dhcpOptions property: The dhcpOptions that contains an array of DNS servers available to
             * VMs deployed in the virtual network..
             *
             * @param dhcpOptions The dhcpOptions that contains an array of DNS servers available to VMs deployed in the
             *     virtual network.
             * @return the next definition stage.
             */
            WithCreate withDhcpOptions(DhcpOptions dhcpOptions);
        }
        /** The stage of the VirtualNetwork definition allowing to specify subnets. */
        interface WithSubnets {
            /**
             * Specifies the subnets property: A list of subnets in a Virtual Network..
             *
             * @param subnets A list of subnets in a Virtual Network.
             * @return the next definition stage.
             */
            WithCreate withSubnets(List<SubnetInner> subnets);
        }
        /** The stage of the VirtualNetwork definition allowing to specify virtualNetworkPeerings. */
        interface WithVirtualNetworkPeerings {
            /**
             * Specifies the virtualNetworkPeerings property: A list of peerings in a Virtual Network..
             *
             * @param virtualNetworkPeerings A list of peerings in a Virtual Network.
             * @return the next definition stage.
             */
            WithCreate withVirtualNetworkPeerings(List<VirtualNetworkPeeringInner> virtualNetworkPeerings);
        }
        /** The stage of the VirtualNetwork definition allowing to specify resourceGuid. */
        interface WithResourceGuid {
            /**
             * Specifies the resourceGuid property: The resourceGuid property of the Virtual Network resource..
             *
             * @param resourceGuid The resourceGuid property of the Virtual Network resource.
             * @return the next definition stage.
             */
            WithCreate withResourceGuid(String resourceGuid);
        }
        /** The stage of the VirtualNetwork definition allowing to specify provisioningState. */
        interface WithProvisioningState {
            /**
             * Specifies the provisioningState property: The provisioning state of the PublicIP resource. Possible
             * values are: 'Updating', 'Deleting', and 'Failed'..
             *
             * @param provisioningState The provisioning state of the PublicIP resource. Possible values are:
             *     'Updating', 'Deleting', and 'Failed'.
             * @return the next definition stage.
             */
            WithCreate withProvisioningState(String provisioningState);
        }
        /** The stage of the VirtualNetwork definition allowing to specify enableDdosProtection. */
        interface WithEnableDdosProtection {
            /**
             * Specifies the enableDdosProtection property: Indicates if DDoS protection is enabled for all the
             * protected resources in the virtual network. It requires a DDoS protection plan associated with the
             * resource..
             *
             * @param enableDdosProtection Indicates if DDoS protection is enabled for all the protected resources in
             *     the virtual network. It requires a DDoS protection plan associated with the resource.
             * @return the next definition stage.
             */
            WithCreate withEnableDdosProtection(Boolean enableDdosProtection);
        }
        /** The stage of the VirtualNetwork definition allowing to specify enableVmProtection. */
        interface WithEnableVmProtection {
            /**
             * Specifies the enableVmProtection property: Indicates if VM protection is enabled for all the subnets in
             * the virtual network..
             *
             * @param enableVmProtection Indicates if VM protection is enabled for all the subnets in the virtual
             *     network.
             * @return the next definition stage.
             */
            WithCreate withEnableVmProtection(Boolean enableVmProtection);
        }
        /** The stage of the VirtualNetwork definition allowing to specify ddosProtectionPlan. */
        interface WithDdosProtectionPlan {
            /**
             * Specifies the ddosProtectionPlan property: The DDoS protection plan associated with the virtual network..
             *
             * @param ddosProtectionPlan The DDoS protection plan associated with the virtual network.
             * @return the next definition stage.
             */
            WithCreate withDdosProtectionPlan(SubResource ddosProtectionPlan);
        }
    }
    /**
     * Begins update for the VirtualNetwork resource.
     *
     * @return the stage of resource update.
     */
    VirtualNetwork.Update update();

    /** The template for VirtualNetwork update. */
    interface Update extends UpdateStages.WithTags {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        VirtualNetwork apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        VirtualNetwork apply(Context context);
    }
    /** The VirtualNetwork update stages. */
    interface UpdateStages {
        /** The stage of the VirtualNetwork update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    VirtualNetwork refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    VirtualNetwork refresh(Context context);
}
