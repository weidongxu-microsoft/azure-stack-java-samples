// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.azurestack.network;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Configuration;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.azurestack.network.fluent.NetworkManagementClient;
import com.azure.resourcemanager.azurestack.network.implementation.DefaultSecurityRulesImpl;
import com.azure.resourcemanager.azurestack.network.implementation.InboundNatRulesImpl;
import com.azure.resourcemanager.azurestack.network.implementation.LoadBalancerBackendAddressPoolsImpl;
import com.azure.resourcemanager.azurestack.network.implementation.LoadBalancerFrontendIpConfigurationsImpl;
import com.azure.resourcemanager.azurestack.network.implementation.LoadBalancerLoadBalancingRulesImpl;
import com.azure.resourcemanager.azurestack.network.implementation.LoadBalancerNetworkInterfacesImpl;
import com.azure.resourcemanager.azurestack.network.implementation.LoadBalancerOutboundRulesImpl;
import com.azure.resourcemanager.azurestack.network.implementation.LoadBalancerProbesImpl;
import com.azure.resourcemanager.azurestack.network.implementation.LoadBalancersImpl;
import com.azure.resourcemanager.azurestack.network.implementation.LocalNetworkGatewaysImpl;
import com.azure.resourcemanager.azurestack.network.implementation.NetworkInterfaceIpConfigurationsImpl;
import com.azure.resourcemanager.azurestack.network.implementation.NetworkInterfaceLoadBalancersImpl;
import com.azure.resourcemanager.azurestack.network.implementation.NetworkInterfaceTapConfigurationsImpl;
import com.azure.resourcemanager.azurestack.network.implementation.NetworkInterfacesImpl;
import com.azure.resourcemanager.azurestack.network.implementation.NetworkManagementClientBuilder;
import com.azure.resourcemanager.azurestack.network.implementation.NetworkSecurityGroupsImpl;
import com.azure.resourcemanager.azurestack.network.implementation.OperationsImpl;
import com.azure.resourcemanager.azurestack.network.implementation.PublicIpAddressesImpl;
import com.azure.resourcemanager.azurestack.network.implementation.RecordSetsImpl;
import com.azure.resourcemanager.azurestack.network.implementation.RouteTablesImpl;
import com.azure.resourcemanager.azurestack.network.implementation.RoutesImpl;
import com.azure.resourcemanager.azurestack.network.implementation.SecurityRulesImpl;
import com.azure.resourcemanager.azurestack.network.implementation.SubnetsImpl;
import com.azure.resourcemanager.azurestack.network.implementation.VirtualNetworkGatewayConnectionsImpl;
import com.azure.resourcemanager.azurestack.network.implementation.VirtualNetworkGatewaysImpl;
import com.azure.resourcemanager.azurestack.network.implementation.VirtualNetworkPeeringsImpl;
import com.azure.resourcemanager.azurestack.network.implementation.VirtualNetworksImpl;
import com.azure.resourcemanager.azurestack.network.implementation.ZonesImpl;
import com.azure.resourcemanager.azurestack.network.models.DefaultSecurityRules;
import com.azure.resourcemanager.azurestack.network.models.InboundNatRules;
import com.azure.resourcemanager.azurestack.network.models.LoadBalancerBackendAddressPools;
import com.azure.resourcemanager.azurestack.network.models.LoadBalancerFrontendIpConfigurations;
import com.azure.resourcemanager.azurestack.network.models.LoadBalancerLoadBalancingRules;
import com.azure.resourcemanager.azurestack.network.models.LoadBalancerNetworkInterfaces;
import com.azure.resourcemanager.azurestack.network.models.LoadBalancerOutboundRules;
import com.azure.resourcemanager.azurestack.network.models.LoadBalancerProbes;
import com.azure.resourcemanager.azurestack.network.models.LoadBalancers;
import com.azure.resourcemanager.azurestack.network.models.LocalNetworkGateways;
import com.azure.resourcemanager.azurestack.network.models.NetworkInterfaceIpConfigurations;
import com.azure.resourcemanager.azurestack.network.models.NetworkInterfaceLoadBalancers;
import com.azure.resourcemanager.azurestack.network.models.NetworkInterfaceTapConfigurations;
import com.azure.resourcemanager.azurestack.network.models.NetworkInterfaces;
import com.azure.resourcemanager.azurestack.network.models.NetworkSecurityGroups;
import com.azure.resourcemanager.azurestack.network.models.Operations;
import com.azure.resourcemanager.azurestack.network.models.PublicIpAddresses;
import com.azure.resourcemanager.azurestack.network.models.RecordSets;
import com.azure.resourcemanager.azurestack.network.models.RouteTables;
import com.azure.resourcemanager.azurestack.network.models.Routes;
import com.azure.resourcemanager.azurestack.network.models.SecurityRules;
import com.azure.resourcemanager.azurestack.network.models.Subnets;
import com.azure.resourcemanager.azurestack.network.models.VirtualNetworkGatewayConnections;
import com.azure.resourcemanager.azurestack.network.models.VirtualNetworkGateways;
import com.azure.resourcemanager.azurestack.network.models.VirtualNetworkPeerings;
import com.azure.resourcemanager.azurestack.network.models.VirtualNetworks;
import com.azure.resourcemanager.azurestack.network.models.Zones;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** Entry point to NetworkManager. Network Client. */
public final class NetworkManager {
    private VirtualNetworkGateways virtualNetworkGateways;

    private VirtualNetworkGatewayConnections virtualNetworkGatewayConnections;

    private LocalNetworkGateways localNetworkGateways;

    private LoadBalancers loadBalancers;

    private LoadBalancerBackendAddressPools loadBalancerBackendAddressPools;

    private LoadBalancerFrontendIpConfigurations loadBalancerFrontendIpConfigurations;

    private InboundNatRules inboundNatRules;

    private LoadBalancerLoadBalancingRules loadBalancerLoadBalancingRules;

    private LoadBalancerOutboundRules loadBalancerOutboundRules;

    private LoadBalancerNetworkInterfaces loadBalancerNetworkInterfaces;

    private LoadBalancerProbes loadBalancerProbes;

    private NetworkInterfaces networkInterfaces;

    private NetworkInterfaceIpConfigurations networkInterfaceIpConfigurations;

    private NetworkInterfaceLoadBalancers networkInterfaceLoadBalancers;

    private NetworkInterfaceTapConfigurations networkInterfaceTapConfigurations;

    private NetworkSecurityGroups networkSecurityGroups;

    private SecurityRules securityRules;

    private DefaultSecurityRules defaultSecurityRules;

    private Operations operations;

    private PublicIpAddresses publicIpAddresses;

    private RouteTables routeTables;

    private Routes routes;

    private VirtualNetworks virtualNetworks;

    private Subnets subnets;

    private VirtualNetworkPeerings virtualNetworkPeerings;

    private RecordSets recordSets;

    private Zones zones;

    private final NetworkManagementClient clientObject;

    private NetworkManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject =
            new NetworkManagementClientBuilder()
                .pipeline(httpPipeline)
                .endpoint(profile.getEnvironment().getResourceManagerEndpoint())
                .subscriptionId(profile.getSubscriptionId())
                .defaultPollInterval(defaultPollInterval)
                .buildClient();
    }

    /**
     * Creates an instance of Network service API entry point.
     *
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the Network service API instance.
     */
    public static NetworkManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Gets a Configurable instance that can be used to create NetworkManager with optional configuration.
     *
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new NetworkManager.Configurable();
    }

    /** The Configurable allowing configurations to be set. */
    public static final class Configurable {
        private final ClientLogger logger = new ClientLogger(Configurable.class);

        private HttpClient httpClient;
        private HttpLogOptions httpLogOptions;
        private final List<HttpPipelinePolicy> policies = new ArrayList<>();
        private RetryPolicy retryPolicy;
        private Duration defaultPollInterval;

        private Configurable() {
        }

        /**
         * Sets the http client.
         *
         * @param httpClient the HTTP client.
         * @return the configurable object itself.
         */
        public Configurable withHttpClient(HttpClient httpClient) {
            this.httpClient = Objects.requireNonNull(httpClient, "'httpClient' cannot be null.");
            return this;
        }

        /**
         * Sets the logging options to the HTTP pipeline.
         *
         * @param httpLogOptions the HTTP log options.
         * @return the configurable object itself.
         */
        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {
            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, "'httpLogOptions' cannot be null.");
            return this;
        }

        /**
         * Adds the pipeline policy to the HTTP pipeline.
         *
         * @param policy the HTTP pipeline policy.
         * @return the configurable object itself.
         */
        public Configurable withPolicy(HttpPipelinePolicy policy) {
            this.policies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
            return this;
        }

        /**
         * Sets the retry policy to the HTTP pipeline.
         *
         * @param retryPolicy the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy, "'retryPolicy' cannot be null.");
            return this;
        }

        /**
         * Sets the default poll interval, used when service does not provide "Retry-After" header.
         *
         * @param defaultPollInterval the default poll interval.
         * @return the configurable object itself.
         */
        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {
            this.defaultPollInterval = Objects.requireNonNull(defaultPollInterval, "'retryPolicy' cannot be null.");
            if (this.defaultPollInterval.isNegative()) {
                throw logger.logExceptionAsError(new IllegalArgumentException("'httpPipeline' cannot be negative"));
            }
            return this;
        }

        /**
         * Creates an instance of Network service API entry point.
         *
         * @param credential the credential to use.
         * @param profile the Azure profile for client.
         * @return the Network service API instance.
         */
        public NetworkManager authenticate(TokenCredential credential, AzureProfile profile) {
            Objects.requireNonNull(credential, "'credential' cannot be null.");
            Objects.requireNonNull(profile, "'profile' cannot be null.");

            StringBuilder userAgentBuilder = new StringBuilder();
            userAgentBuilder
                .append("azsdk-java")
                .append("-")
                .append("com.azure.resourcemanager.azurestack.network")
                .append("/")
                .append("1.0.0-beta.1");
            if (!Configuration.getGlobalConfiguration().get("AZURE_TELEMETRY_DISABLED", false)) {
                userAgentBuilder
                    .append(" (")
                    .append(Configuration.getGlobalConfiguration().get("java.version"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.name"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.version"))
                    .append("; auto-generated)");
            } else {
                userAgentBuilder.append(" (auto-generated)");
            }

            if (retryPolicy == null) {
                retryPolicy = new RetryPolicy("Retry-After", ChronoUnit.SECONDS);
            }
            List<HttpPipelinePolicy> policies = new ArrayList<>();
            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));
            policies.add(new RequestIdPolicy());
            HttpPolicyProviders.addBeforeRetryPolicies(policies);
            policies.add(retryPolicy);
            policies.add(new AddDatePolicy());
            policies
                .add(
                    new BearerTokenAuthenticationPolicy(
                        credential, profile.getEnvironment().getManagementEndpoint() + "/.default"));
            HttpPolicyProviders.addAfterRetryPolicies(policies);
            policies.add(new HttpLoggingPolicy(httpLogOptions));
            HttpPipeline httpPipeline =
                new HttpPipelineBuilder()
                    .httpClient(httpClient)
                    .policies(policies.toArray(new HttpPipelinePolicy[0]))
                    .build();
            return new NetworkManager(httpPipeline, profile, defaultPollInterval);
        }
    }

    /** @return Resource collection API of VirtualNetworkGateways. */
    public VirtualNetworkGateways virtualNetworkGateways() {
        if (this.virtualNetworkGateways == null) {
            this.virtualNetworkGateways =
                new VirtualNetworkGatewaysImpl(clientObject.getVirtualNetworkGateways(), this);
        }
        return virtualNetworkGateways;
    }

    /** @return Resource collection API of VirtualNetworkGatewayConnections. */
    public VirtualNetworkGatewayConnections virtualNetworkGatewayConnections() {
        if (this.virtualNetworkGatewayConnections == null) {
            this.virtualNetworkGatewayConnections =
                new VirtualNetworkGatewayConnectionsImpl(clientObject.getVirtualNetworkGatewayConnections(), this);
        }
        return virtualNetworkGatewayConnections;
    }

    /** @return Resource collection API of LocalNetworkGateways. */
    public LocalNetworkGateways localNetworkGateways() {
        if (this.localNetworkGateways == null) {
            this.localNetworkGateways = new LocalNetworkGatewaysImpl(clientObject.getLocalNetworkGateways(), this);
        }
        return localNetworkGateways;
    }

    /** @return Resource collection API of LoadBalancers. */
    public LoadBalancers loadBalancers() {
        if (this.loadBalancers == null) {
            this.loadBalancers = new LoadBalancersImpl(clientObject.getLoadBalancers(), this);
        }
        return loadBalancers;
    }

    /** @return Resource collection API of LoadBalancerBackendAddressPools. */
    public LoadBalancerBackendAddressPools loadBalancerBackendAddressPools() {
        if (this.loadBalancerBackendAddressPools == null) {
            this.loadBalancerBackendAddressPools =
                new LoadBalancerBackendAddressPoolsImpl(clientObject.getLoadBalancerBackendAddressPools(), this);
        }
        return loadBalancerBackendAddressPools;
    }

    /** @return Resource collection API of LoadBalancerFrontendIpConfigurations. */
    public LoadBalancerFrontendIpConfigurations loadBalancerFrontendIpConfigurations() {
        if (this.loadBalancerFrontendIpConfigurations == null) {
            this.loadBalancerFrontendIpConfigurations =
                new LoadBalancerFrontendIpConfigurationsImpl(
                    clientObject.getLoadBalancerFrontendIpConfigurations(), this);
        }
        return loadBalancerFrontendIpConfigurations;
    }

    /** @return Resource collection API of InboundNatRules. */
    public InboundNatRules inboundNatRules() {
        if (this.inboundNatRules == null) {
            this.inboundNatRules = new InboundNatRulesImpl(clientObject.getInboundNatRules(), this);
        }
        return inboundNatRules;
    }

    /** @return Resource collection API of LoadBalancerLoadBalancingRules. */
    public LoadBalancerLoadBalancingRules loadBalancerLoadBalancingRules() {
        if (this.loadBalancerLoadBalancingRules == null) {
            this.loadBalancerLoadBalancingRules =
                new LoadBalancerLoadBalancingRulesImpl(clientObject.getLoadBalancerLoadBalancingRules(), this);
        }
        return loadBalancerLoadBalancingRules;
    }

    /** @return Resource collection API of LoadBalancerOutboundRules. */
    public LoadBalancerOutboundRules loadBalancerOutboundRules() {
        if (this.loadBalancerOutboundRules == null) {
            this.loadBalancerOutboundRules =
                new LoadBalancerOutboundRulesImpl(clientObject.getLoadBalancerOutboundRules(), this);
        }
        return loadBalancerOutboundRules;
    }

    /** @return Resource collection API of LoadBalancerNetworkInterfaces. */
    public LoadBalancerNetworkInterfaces loadBalancerNetworkInterfaces() {
        if (this.loadBalancerNetworkInterfaces == null) {
            this.loadBalancerNetworkInterfaces =
                new LoadBalancerNetworkInterfacesImpl(clientObject.getLoadBalancerNetworkInterfaces(), this);
        }
        return loadBalancerNetworkInterfaces;
    }

    /** @return Resource collection API of LoadBalancerProbes. */
    public LoadBalancerProbes loadBalancerProbes() {
        if (this.loadBalancerProbes == null) {
            this.loadBalancerProbes = new LoadBalancerProbesImpl(clientObject.getLoadBalancerProbes(), this);
        }
        return loadBalancerProbes;
    }

    /** @return Resource collection API of NetworkInterfaces. */
    public NetworkInterfaces networkInterfaces() {
        if (this.networkInterfaces == null) {
            this.networkInterfaces = new NetworkInterfacesImpl(clientObject.getNetworkInterfaces(), this);
        }
        return networkInterfaces;
    }

    /** @return Resource collection API of NetworkInterfaceIpConfigurations. */
    public NetworkInterfaceIpConfigurations networkInterfaceIpConfigurations() {
        if (this.networkInterfaceIpConfigurations == null) {
            this.networkInterfaceIpConfigurations =
                new NetworkInterfaceIpConfigurationsImpl(clientObject.getNetworkInterfaceIpConfigurations(), this);
        }
        return networkInterfaceIpConfigurations;
    }

    /** @return Resource collection API of NetworkInterfaceLoadBalancers. */
    public NetworkInterfaceLoadBalancers networkInterfaceLoadBalancers() {
        if (this.networkInterfaceLoadBalancers == null) {
            this.networkInterfaceLoadBalancers =
                new NetworkInterfaceLoadBalancersImpl(clientObject.getNetworkInterfaceLoadBalancers(), this);
        }
        return networkInterfaceLoadBalancers;
    }

    /** @return Resource collection API of NetworkInterfaceTapConfigurations. */
    public NetworkInterfaceTapConfigurations networkInterfaceTapConfigurations() {
        if (this.networkInterfaceTapConfigurations == null) {
            this.networkInterfaceTapConfigurations =
                new NetworkInterfaceTapConfigurationsImpl(clientObject.getNetworkInterfaceTapConfigurations(), this);
        }
        return networkInterfaceTapConfigurations;
    }

    /** @return Resource collection API of NetworkSecurityGroups. */
    public NetworkSecurityGroups networkSecurityGroups() {
        if (this.networkSecurityGroups == null) {
            this.networkSecurityGroups = new NetworkSecurityGroupsImpl(clientObject.getNetworkSecurityGroups(), this);
        }
        return networkSecurityGroups;
    }

    /** @return Resource collection API of SecurityRules. */
    public SecurityRules securityRules() {
        if (this.securityRules == null) {
            this.securityRules = new SecurityRulesImpl(clientObject.getSecurityRules(), this);
        }
        return securityRules;
    }

    /** @return Resource collection API of DefaultSecurityRules. */
    public DefaultSecurityRules defaultSecurityRules() {
        if (this.defaultSecurityRules == null) {
            this.defaultSecurityRules = new DefaultSecurityRulesImpl(clientObject.getDefaultSecurityRules(), this);
        }
        return defaultSecurityRules;
    }

    /** @return Resource collection API of Operations. */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(clientObject.getOperations(), this);
        }
        return operations;
    }

    /** @return Resource collection API of PublicIpAddresses. */
    public PublicIpAddresses publicIpAddresses() {
        if (this.publicIpAddresses == null) {
            this.publicIpAddresses = new PublicIpAddressesImpl(clientObject.getPublicIpAddresses(), this);
        }
        return publicIpAddresses;
    }

    /** @return Resource collection API of RouteTables. */
    public RouteTables routeTables() {
        if (this.routeTables == null) {
            this.routeTables = new RouteTablesImpl(clientObject.getRouteTables(), this);
        }
        return routeTables;
    }

    /** @return Resource collection API of Routes. */
    public Routes routes() {
        if (this.routes == null) {
            this.routes = new RoutesImpl(clientObject.getRoutes(), this);
        }
        return routes;
    }

    /** @return Resource collection API of VirtualNetworks. */
    public VirtualNetworks virtualNetworks() {
        if (this.virtualNetworks == null) {
            this.virtualNetworks = new VirtualNetworksImpl(clientObject.getVirtualNetworks(), this);
        }
        return virtualNetworks;
    }

    /** @return Resource collection API of Subnets. */
    public Subnets subnets() {
        if (this.subnets == null) {
            this.subnets = new SubnetsImpl(clientObject.getSubnets(), this);
        }
        return subnets;
    }

    /** @return Resource collection API of VirtualNetworkPeerings. */
    public VirtualNetworkPeerings virtualNetworkPeerings() {
        if (this.virtualNetworkPeerings == null) {
            this.virtualNetworkPeerings =
                new VirtualNetworkPeeringsImpl(clientObject.getVirtualNetworkPeerings(), this);
        }
        return virtualNetworkPeerings;
    }

    /** @return Resource collection API of RecordSets. */
    public RecordSets recordSets() {
        if (this.recordSets == null) {
            this.recordSets = new RecordSetsImpl(clientObject.getRecordSets(), this);
        }
        return recordSets;
    }

    /** @return Resource collection API of Zones. */
    public Zones zones() {
        if (this.zones == null) {
            this.zones = new ZonesImpl(clientObject.getZones(), this);
        }
        return zones;
    }

    /**
     * @return Wrapped service client NetworkManagementClient providing direct access to the underlying auto-generated
     *     API implementation, based on Azure REST API.
     */
    public NetworkManagementClient serviceClient() {
        return this.clientObject;
    }
}
